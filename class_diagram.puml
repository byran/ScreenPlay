@startuml

hide empty members


GivenStep o--> Context
GivenStep *--> Task

WhenStep o--> Context
WhenStep *--> Task

ThenStep o--> Context
ThenStep *--> Question
ThenStep *--> Condition
ThenStep *--> Matcher

Context *--> behave.Actors

behave.Actors *--> Actor

Actor -left-> Task : <<performs>>
Actor --> Action : <<performs>>
Actor -right-> Condition : <<checks>>
Actor --> Question : <<asks>>
Actor *--> Ability

Task *--> Action
Action --> Ability

Condition --> Question
Condition --> Matcher
Question --> Ability : <<queries>>
see_that -u-|> Condition

class GivenStep <<function>> {
}
hide GivenStep circle

class WhenStep <<function>> {
}
hide WhenStep circle

class ThenStep <<function>> {
}
hide ThenStep circle

class Context {
    actors : Actors
    they : Actor
}

namespace behave {
    class Actors {
        actors : dict<name : std, Actor>
        __getitem__(key: str) : Actor
        add_person_called(name: str) : Actor
        switch_active(name: str) : None
        clean_up() : None
    }
}

class Actor {
    name: str
    ability(ability_type: type) : Ability
    can(abilities[]: Ability) : None
    attempts_to(tasks[]: Task) : None
    should(conditions[]: Condition) : None
}

abstract class Ability {
}

note right of Ability
Interacts with the system
(e.g. via a serial connection
to an Arduino)
end note

class Task {
    perform_as(actor: Actor) : None
}

class Action {
    perform_as(actor: Actor) : None
}

class Condition {
    __init__(question: Question, matcher: Matcher)
    check_as(actor: Actor) : None
}

class see_that {
}

class Question {
    answered_by(actor: Actor) : Any
}

abstract class Matcher {
    matches(answer: Any)
}

note top of Matcher
Stores the expected result
end note

@enduml